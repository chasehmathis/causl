// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cumsum_mat
Rcpp::NumericMatrix cumsum_mat(Rcpp::NumericMatrix x);
RcppExport SEXP _causl_cumsum_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// Rpr
void Rpr(Rcpp::NumericVector x, int max);
RcppExport SEXP _causl_Rpr(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    Rpr(x, max);
    return R_NilValue;
END_RCPP
}
// locations
Rcpp::NumericVector locations(Rcpp::NumericVector u, Rcpp::NumericVector v);
RcppExport SEXP _causl_locations(SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(locations(u, v));
    return rcpp_result_gen;
END_RCPP
}
// g
int g(int n);
RcppExport SEXP _causl_g(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(g(n));
    return rcpp_result_gen;
END_RCPP
}
// dGcop
arma::vec dGcop(arma::mat const& x, arma::mat const& sigma, bool const logd);
RcppExport SEXP _causl_dGcop(SEXP xSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dGcop(x, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// dGcop_sig
arma::vec dGcop_sig(arma::mat const& x, arma::cube const& sigma, bool const logd);
RcppExport SEXP _causl_dGcop_sig(SEXP xSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dGcop_sig(x, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// dGDcop
arma::vec dGDcop(arma::mat const& x, arma::mat const& sigma, Rcpp::List trunc, bool const logd);
RcppExport SEXP _causl_dGDcop(SEXP xSEXP, SEXP sigmaSEXP, SEXP truncSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dGDcop(x, sigma, trunc, logd));
    return rcpp_result_gen;
END_RCPP
}
// dGDcop_sig
arma::vec dGDcop_sig(arma::mat const& x, arma::cube const& sigma, Rcpp::List trunc, bool const logd);
RcppExport SEXP _causl_dGDcop_sig(SEXP xSEXP, SEXP sigmaSEXP, SEXP truncSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dGDcop_sig(x, sigma, trunc, logd));
    return rcpp_result_gen;
END_RCPP
}
// dGDcop2_sig
arma::vec dGDcop2_sig(arma::mat const& x, arma::cube const& sigma, arma::mat const& eta, int q, bool const logd);
RcppExport SEXP _causl_dGDcop2_sig(SEXP xSEXP, SEXP sigmaSEXP, SEXP etaSEXP, SEXP qSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cube const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dGDcop2_sig(x, sigma, eta, q, logd));
    return rcpp_result_gen;
END_RCPP
}
// dGDcop2
arma::vec dGDcop2(arma::mat const& x, arma::mat const& sigma, arma::mat const& eta, int q, bool const logd);
RcppExport SEXP _causl_dGDcop2(SEXP xSEXP, SEXP sigmaSEXP, SEXP etaSEXP, SEXP qSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dGDcop2(x, sigma, eta, q, logd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_causl_cumsum_mat", (DL_FUNC) &_causl_cumsum_mat, 1},
    {"_causl_Rpr", (DL_FUNC) &_causl_Rpr, 2},
    {"_causl_locations", (DL_FUNC) &_causl_locations, 2},
    {"_causl_g", (DL_FUNC) &_causl_g, 1},
    {"_causl_dGcop", (DL_FUNC) &_causl_dGcop, 3},
    {"_causl_dGcop_sig", (DL_FUNC) &_causl_dGcop_sig, 3},
    {"_causl_dGDcop", (DL_FUNC) &_causl_dGDcop, 4},
    {"_causl_dGDcop_sig", (DL_FUNC) &_causl_dGDcop_sig, 4},
    {"_causl_dGDcop2_sig", (DL_FUNC) &_causl_dGDcop2_sig, 5},
    {"_causl_dGDcop2", (DL_FUNC) &_causl_dGDcop2, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_causl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
